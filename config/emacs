(add-to-list 'load-path "~/.emacs.d/plugins/") ; add custom dir to load path

; settings start here
(setq inhibit-startup-screen t)     ;disable startup screen
;(setq initial-buffer-choice t)      ;show scratch buffer
;(defun setup-fonts ()
;  (set-face-attribute 'default nil :height 100) ;default font size
;  (set-face-font 'default "-misc-fixed-medium-r-semicondensed-*-13-*-75-75-c-60-*-*") ;fixed as in xterm
;  )
; setting font makes sense if running under X
;(if window-system
;    (setup-fonts)
;  )
(require 'font-lock)                ;syntax on
(global-font-lock-mode t)           ;enable syntax coloring
(setq font-lock-verbose nil)        ;no messages
(setq query-replace-highlight t)    ;highlight query
(setq search-highlight t)           ;highlight incremental search
(setq blink-matching-paren-distance nil) ;search for open-paren till point-min
(delete-selection-mode t)           ;deleting region by typing or del (like Win)
(setq transient-mark-mode t)        ;show selected region
;(global-hl-line-mode 1)             ;highlight current line
(global-linum-mode t)               ;show line numbers
(line-number-mode t)                ;show line number in status bar
(column-number-mode t)              ;show column number in status bar
(require 'tramp)                    ;enable TRAMP (edit through network)
(setq tramp-default-method "ssh")   ;TRAMP use ssh
(tool-bar-mode -1)                  ;disable toolbar
(set-scroll-bar-mode 'right)        ;scroll bar on right

; highlight matching parenthesis
(setq show-paren-delay 0)
(setq show-paren-syle 'mixed)
(show-paren-mode t)

; javascript mode
(add-to-list 'auto-mode-alist '("\\.js\\'" . javascript-mode)) ;add default mode for *.js files
(autoload 'javascript-mode "javascript" nil t) ; load javascript when javascipt-mode is needed

;indentation
;general
(setq-default indent-tabs-mode nil) ;use spaces instead of tabs
(setq tab-width 4)
(setq stardard-indent 4)

;C
(setq c-default-style "linux"
      c-basic-offset 4)

; color themes
(require 'color-theme)              ;color theme
;(defun set-color-theme (f)
;  (if (not (fboundp f))
;      (color-theme-initialize))
;  (funcall f)
;)
; try to set color-theme-tty dark, initialize if needed
;(set-color-theme 'color-theme-tty-dark)   
(require 'naquadah-theme)

; cscope
(require 'xcscope)                  ;enable xcscope

;IDO
(require 'ido)
(ido-mode t)
(setq ido-enable-flex-matching t)

;yasnippet
(add-to-list 'load-path "~/.emacs.d/plugins/yasnippet")
(require 'yasnippet)
(yas/initialize)
(yas/load-directory "~/.emacs.d/plugins/yasnippet/snippets")

;compilation window
(setq compilation-window-height 8)  ;compilation window to be smaller
(setq compilation-finish-function   ;compilation window will disappear
      (lambda (buf str)
        (if (string-match "exited abnormally" str)
            ;;there were errors
            (message "compilation errors, press C-x ` to visit")
          ;;no errors, make the compilation window go away in 0.5 seconds
          (run-at-time 0.5 nil 'delete-windows-on buf)
          (message "NO COMPILATION ERRORS!"))))

;recentf - recent files
(require 'recentf)
(recentf-mode 1)
(setq recentf-max-saved-items 500)
(setq recentf-max-menu-items 60)

;jump to matching parenthesis
(defun goto-match-paren (arg)
  "Go to the matching  if on (){}[], similar to vi style of % "
  (interactive "p")
  ;; first, check for "outside of bracket" positions expected by forward-sexp, etc.
  (cond ((looking-at "[\[\(\{]") (forward-sexp))
        ((looking-back "[\]\)\}]" 1) (backward-sexp))
        ;; now, try to succeed from inside of a bracket
        ((looking-at "[\]\)\}]") (forward-char) (backward-sexp))
        ((looking-back "[\[\(\{]" 1) (backward-char) (forward-sexp))
        (t nil)))

; add refresh file 
(defun refresh-file ()
  (interactive)
  (revert-buffer t (not (buffer-modified-p)) t)
  )

;jumplist
(require 'jumplist)   

; set frame title manually
(defun set-frame-title (title)
  "Set current frame title"
  (interactive "sNew frame title: ")
  (setq frame-title-format title)
)

; key bindings
(global-set-key (kbd "C-<tab>") 'other-frame)
(global-set-key (kbd "C-<prior>") 'select-previous-window) ; ctr+pg_up
(global-set-key (kbd "C-<next>") 'select-next-window) ; ctr+pg_down
(global-set-key (kbd "M-<f12>") 'recentf-open-files)
(global-set-key (kbd "s-o") 'jl-jump-backward)
(global-set-key (kbd "s-i") 'jl-jump-forward)
(global-set-key (kbd "C-5") 'goto-match-paren)
(global-set-key (kbd "C-Z") nil) ;disable ctrl + z background mode
(global-set-key (kbd "<f5>") 'refresh-file)
