(add-to-list 'load-path "~/.emacs.d/plugins/") ; add custom dir to load path
(setq local-cache-dir (expand-file-name "~/.emacs.d/cache/")) ; local save path

; create cache dir if one does not exist
(if (not (file-exists-p local-cache-dir))
    (progn
      (message "creating cache directory at %s" local-cache-dir)
      (make-directory local-cache-dir)))

; settings start here
(setq inhibit-startup-screen t)     ;disable startup screen
;(setq initial-buffer-choice t)      ;show scratch buffer
;(defun setup-fonts ()
;  (set-face-attribute 'default nil :height 100) ;default font size
;  (set-face-font 'default "-misc-fixed-medium-r-semicondensed-*-13-*-75-75-c-60-*-*") ;fixed as in xterm
;  )
; setting font makes sense if running under X
;(if window-system
;    (setup-fonts)
;  )
;; use ProggyClean
(custom-set-faces
 '(default ((t (:family "ProggyCleanTT" :height 122)))))

(require 'font-lock)                ;syntax on
(global-font-lock-mode t)           ;enable syntax coloring
(setq font-lock-verbose nil)        ;no messages
(setq query-replace-highlight t)    ;highlight query
(setq search-highlight t)           ;highlight incremental search
(setq blink-matching-paren-distance nil) ;search for open-paren till point-min
(delete-selection-mode t)           ;deleting region by typing or del (like Win)
(setq transient-mark-mode t)        ;show selected region
(global-hl-line-mode 1)             ;highlight current line
(global-linum-mode t)               ;show line numbers
(line-number-mode t)                ;show line number in status bar
(column-number-mode t)              ;show column number in status bar
(size-indication-mode t)
(require 'tramp)                    ;enable TRAMP (edit through network)
(setq tramp-default-method "ssh")   ;TRAMP use ssh
(tool-bar-mode -1)                  ;disable toolbar
(set-scroll-bar-mode 'right)        ;scroll bar on right
(mouse-avoidance-mode 'jump)

(setq ;; scrolling
  scroll-margin 0                        ;; do smooth scrolling, ...
  scroll-conservatively 100000           ;; ... the defaults ...
  scroll-up-aggressively 0               ;; ... are very ...
  scroll-down-aggressively 0             ;; ... annoying
  scroll-preserve-screen-position t)     ;; preserve screen pos with C-v/M-v 

; highlight matching parenthesis
(setq show-paren-delay 0)
(setq show-paren-syle 'mixed)
(show-paren-mode t)

; javascript mode
(add-to-list 'auto-mode-alist '("\\.js\\'" . javascript-mode)) ;add default mode for *.js files
(autoload 'javascript-mode "javascript" nil t) ; load javascript when javascipt-mode is needed

;indentation
;general
(setq-default indent-tabs-mode nil) ;use spaces instead of tabs
(setq tab-width 4)
(setq stardard-indent 4)

;C
(setq c-default-style "linux"
      c-basic-offset 4)

; color themes
(require 'color-theme)              ;color theme
(defun set-color-theme (f)
  (if (not (fboundp f))
      (color-theme-initialize))
  (funcall f)
)
; try to set color-theme-tty dark, initialize if needed
;(set-color-theme 'color-theme-tty-dark)   
(require 'naquadah-theme)

; cscope
(require 'xcscope)                  ;enable xcscope
; gnu global
;; (require 'gtags)
; prevent auto tags update in blacklisted directories
;(setq disallowed-gtags-dirs '("pBS"))

;; (defun gtags-create-or-update ()
;;   "create or update the gnu global tag file"
;;   (interactive)
;;   (if (not (= 0 (call-process "global" nil nil nil " -p"))) ; tagfile doesn't exist?
;;     (let ((olddir default-directory)
;;           (topdir (read-directory-name  
;;                     "gtags: top of source tree:" default-directory)))
;;       (cd topdir)
;;       (shell-command "gtags && echo 'created tagfile'")
;;       (cd olddir)) ; restore   
;;     ;;  tagfile already exists; update it
;;     (shell-command "global -u && echo 'updated tagfile'")))

;; (defun allowed-gtags-dir (dir)
;;   "check if directory can be indexed"
;;   (interactive)
;;   (if (boundp 'disallowed-gtags-dirs)
;;       ;; check if directory name matches any of blacklisted dirs
;;       (let (retlist)
;;         (dolist (elt disallowed-gtags-dirs)
;;           (let ((case-fold-search nil))
;;             (if (string-match elt dir)
;;                 (progn ;; true
;;                   (setq retlist (cons elt retlist))
;;                   elt)
;;               )
;;             ))
;;         (not retlist))
;;     t))

;; (add-hook 'c-mode-common-hook
;;   (lambda ()
;;     (require 'gtags)
;;     (gtags-mode t)
;;     (let ((dir (expand-file-name default-directory)))
;;       (if (allowed-gtags-dir dir)
;;           (gtags-create-or-update)
;;         (message "directory %s is blacklisted for gtags" dir)))))

;; uniquify: unique buffer names
(require 'uniquify) ;; make buffer names more unique
(setq 
  uniquify-buffer-name-style 'post-forward
  uniquify-separator ":"
  uniquify-after-kill-buffer-p t
  uniquify-ignore-buffers-re "^\\*")

;IDO
(require 'ido)
(ido-mode 'both)
(setq 
  ido-save-directory-list-file (concat local-cache-dir "ido.last")
  ido-ignore-buffers ;; ignore these guys
  '("\\` " "^\*Mess" "^\*Back" ".*Completion" "^\*Ido" "^\*trace"
     "^\*compilation" "^\*GTAGS" "^session\.*" "^\*")
  ido-work-directory-list '("~/" "~/Desktop" "~/Documents" "~src")
  ido-case-fold  t                 ; be case-insensitive
  ido-enable-last-directory-history t ; remember last used dirs
  ido-max-work-directory-list 30   ; should be enough
  ido-max-work-file-list      50   ; remember many
  ido-use-filename-at-point nil    ; don't use filename at point (annoying)
  ido-use-url-at-point nil         ; don't use url at point (annoying)
  ido-enable-flex-matching nil     ; don't try to be too smart
  ido-max-prospects 8              ; don't spam my minibuffer
  ido-confirm-unique-completion t  ; wait for RET, even with unique completion
  ido-default-buffer-method 'select-window) ; show buffer in frame that I want it to be
; resize minibuf with ido completions
(add-hook 'ido-minibuffer-setup-hook 
  (function
    (lambda ()
      (make-local-variable 'resize-minibuffer-window-max-height)
      (setq resize-minibuffer-window-max-height 1))))

;yasnippet
(add-to-list 'load-path "~/.emacs.d/plugins/yasnippet")
(require 'yasnippet)
(yas/initialize)
(yas/load-directory "~/.emacs.d/plugins/yasnippet/snippets")

;compilation window
(setq compilation-window-height 8)  ;compilation window to be smaller
(setq compilation-finish-function   ;compilation window will disappear
      (lambda (buf str)
        (if (string-match "exited abnormally" str)
            ;;there were errors
            (message "compilation errors, press C-x ` to visit")
          ;;no errors, make the compilation window go away in 0.5 seconds
          (run-at-time 0.5 nil 'delete-windows-on buf)
          (message "NO COMPILATION ERRORS!"))))

;recentf - recent files
(require 'recentf)
(setq 
    recentf-save-file (concat local-cache-dir "recentf")
    recentf-max-saved-items 100
    recentf-max-menu-items 15)
(recentf-mode t)

;speedbar in frame
(require 'sr-speedbar)

;jump to matching parenthesis
(defun goto-match-paren (arg)
  "Go to the matching  if on (){}[], similar to vi style of % "
  (interactive "p")
  ;; first, check for "outside of bracket" positions expected by forward-sexp, etc.
  (cond ((looking-at "[\[\(\{]") (forward-sexp))
        ((looking-back "[\]\)\}]" 1) (backward-sexp))
        ;; now, try to succeed from inside of a bracket
        ((looking-at "[\]\)\}]") (forward-char) (backward-sexp))
        ((looking-back "[\[\(\{]" 1) (backward-char) (forward-sexp))
        (t nil)))

; add refresh file 
(defun refresh-file ()
  (interactive)
  (revert-buffer t (not (buffer-modified-p)) t)
  )

;jumplist
(require 'jumplist)   

; set frame title manually
(defun set-frame-title (title)
  "Set current frame title"
  (interactive "sNew frame title: ")
  (setq frame-title-format title)
)

; key bindings
(global-set-key (kbd "C-<tab>") 'other-frame)
(global-set-key (kbd "C-<prior>") 'select-previous-window) ; ctr+pg_up
(global-set-key (kbd "C-<next>") 'select-next-window) ; ctr+pg_down
(global-set-key (kbd "C-<f12>") 'recentf-open-files)
(global-set-key (kbd "s-o") 'jl-jump-backward)
(global-set-key (kbd "s-i") 'jl-jump-forward)
(global-set-key (kbd "C-5") 'goto-match-paren)
(global-set-key (kbd "C-Z") nil) ;disable ctrl + z background mode
(global-set-key (kbd "C-<f5>") 'refresh-file)
(global-set-key (kbd "C-<f8>") 'comment-or-uncomment-region) ; (un)comment
(when (fboundp 'sr-speedbar-toggle)
  (global-set-key (kbd "C-<f9>") 'sr-speedbar-toggle)
  (global-set-key (kbd "C-<f10>") 'sr-speedbar-select-window)) ; speedbar

; additional gtags bindings
;; (add-hook 'gtags-mode-hook 
;;   (lambda()
;;     (local-set-key (kbd "M-.") 'gtags-find-tag)   ; find a tag, also M-.
;;     (local-set-key (kbd "M-,") 'gtags-find-rtag)
;;     (local-set-key (kbd "C-S-<f5>") 'gtags-create-or-update)
;;     (local-set-key (kbd "C-c s s") 'gtags-find-tag-from-here)
;;     (local-set-key (kbd "C-c s e") 'gtags-find-with-grep)
;;     (local-set-key (kbd "C-c s f") 'gtags-find-file)))  ; reverse tag

