(add-to-list 'load-path "~/.emacs.d/plugins/") ; add custom dir to load path

; settings start here
(require 'font-lock)                ;syntax on
(global-font-lock-mode t)           ;enable syntax coloring
(setq font-lock-verbose nil)        ;no messages
(setq query-replace-highlight t)    ;highlight query
(setq search-highlight t)           ;highlight incremental search
(show-paren-mode t)                 ;show matching parentheses
(setq blink-matching-paren-distance nil) ;search for open-paren till point-min
(delete-selection-mode t)           ;deleting region by typing or del (like Win)
(setq transient-mark-mode t)        ;show selected region
(setq inhibit-startup-screen t)     ;disable startup screen
;(setq initial-buffer-choice t)      ;show scratch buffer
;(global-hl-line-mode 1)             ;highlight current line
(global-linum-mode t)               ;show line numbers
(line-number-mode t)                ;show line number in status bar
(column-number-mode t)              ;show column number in status bar
(require 'tramp)                    ;enable TRAMP (edit through network)
(setq tramp-default-method "ssh")   ;TRAMP use ssh
(tool-bar-mode nil)                 ;disable toolbar
(require 'color-theme)              ;color theme
(color-theme-andreas)               ;starting color theme
;(global-set-key "C-Z" nil)          ;disable ctrl + z background mode
(set-face-attribute 'default nil :height 100) ;default font size

; javascript mode
(add-to-list 'auto-mode-alist '("\\.js\\'" . javascript-mode)) ;add default mode for *.js files
(autoload 'javascript-mode "javascript" nil t) ; load javascript when javascipt-mode is needed

(require 'xcscope)                  ;enable xcscope

;yasnippet
(add-to-list 'load-path "~/.emacs.d/plugins/yasnippet")
(require 'yasnippet)
(yas/initialize)
(yas/load-directory "~/.emacs.d/plugins/yasnippet/snippets")

;indentation
;general
(setq-default indent-tabs-mode nil) ;use spaces instead of tabs
;C
(setq c-default-style "linux"
      c-basic-offset 4)

;compilation window
(setq compilation-window-height 8)  ;compilation window to be smaller
(setq compilation-finish-function   ;compilation window will disappear
      (lambda (buf str)
        (if (string-match "exited abnormally" str)
            ;;there were errors
            (message "compilation errors, press C-x ` to visit")
          ;;no errors, make the compilation window go away in 0.5 seconds
          (run-at-time 0.5 nil 'delete-windows-on buf)
          (message "NO COMPILATION ERRORS!"))))